union CostumerMenuChoises = OrderItem | MenuItem
union SaveCookie = CookieSuccess | CookieError
union InfoItem = User | Restaurant
scalar Date

type CookieError {
  message: String!
}

type CookieSuccess {
  message: String
}
type Address {
  first: String!
  secound: String!
}
type UploadedFileResponse {
  filename: String!
  mimetype: String!
  encoding: String!
}
type Message {
  content: String
  id: ID
  user: String
}

type OrderItem {
  orderQuantity: Int
  id: ID
  costumer: Costumer
  product: MenuItem
  restaurant: String
  _id: ID
}
type PayedItem {
  costumer: Costumer
  product: MenuItem
  restaurant: String
  date: String
  _id: ID
  createdAt: Date
}
type MenuSubItem {
  _id: MenuItem
}

type User {
  name: String!
  email: String!
  password: String!
  token: String!
  _id: ID!
  isAdmin: Boolean!
  restaurant: Restaurant!
}
type myArray {
  name: String!
}

type Restaurant {
  name: String
  owner: String
  description: String
  numReviews: Int
  reviews: [String]
  type: String
  images: [String]
  rating: Int
  location: Location
  _id: ID
  openTimes: String
  address: String
  foodTypes: String
}

type Location {
  type: String!
  coordinates: [Float!]
}
input LocationInput {
  mytype: String!
  coordinates: [Int!]
}
input RegisterInput {
  email: String!
  password: String!
}
type Token {
  token: String!
}
type Costumer {
  name: String
  table: Int
  email: String
  _id: ID
}
type MenuItem {
  name: String
  itemsType: String
  price: Int
  description: String
  quantity: Int
  availability: Boolean
  _id: ID
  id: ID
  restaurant: String
  category: String
  orderQuantity: Int
  images: [String]
}
type MenuParent {
  itemName: String
  collectionType: String
  item: [MenuItem]
  restaurant: Restaurant
  image: String
  _id: ID
}
type AdminOrder {
  orderQuantity: Int
  id: ID
  costumer: Costumer
  product: MenuItem
  restaurant: String
  _id: ID
}
type Analistic {
  _id: ID
  year: Int
  month: Int
  day: Int
  hour: Int
  minutes: Int
  seconds: Int
  milliseconds: Int
  dayOfYear: Int
  dayOfWeek: Int
  week: Int
  sum: Int
}
input MenuItemInput {
  name: String
  itemsType: String
  price: Int
  description: String
  quantity: Int
  availability: Boolean
}

type Menu {
  restaurant: Restaurant
  category: [MenuParent]
  _id: ID
}
type CostumerAddress {
  title: String
  city: String
  region: String
  postNumber: Int
  address: String
}

type SellInfo {
  sum: Float
  Restaurant: Restaurant
  date: Date
  items: [MenuItem]
  costumer: Costumer
}
input CostumerAddressInput {
  title: String
  city: String
  region: String
  postNumber: Int
  address: String
}
input MenuParentInput {
  id: Int!
  itemName: String!
  collectionType: String!
  item: [MenuItemInput!]
}
input MenuItemInput {
  id: String
  price: Int
  description: String
  name: String
  images: [String]
}

# type Subscription {
#   messages: [Message]
# }

type Query {
  messages: [Message!]
  CurrentUser: User
  Restaurants: [Restaurant]
  Costumer: Costumer
  Menu(restaurant: String!): [MenuParent]
  MenuByCategory(restaurant: String!): [MenuParent]
  MenuItemByCategory(
    category: String!
    restaurant: String!
  ): [CostumerMenuChoises]
  MenuItemCount(category: String!, restaurant: String!): OrderItem
  OrderItems: OrderItem
  Orders(restaurant: String!): [OrderItem]!
  CostumerOrders(restaurant: String!): [OrderItem]!
  AdminOrders: [AdminOrder]!
  Address: CostumerAddress
  PayedOrders(restaurant: String!): [PayedItem]!
  GetAnalistics: [Analistic]
}

type Mutation {
  CreateUser(email: String!, password: String!, username: String!): User!
  SignIn(email: String!, password: String!): Token!
  SignInWithGoogle(email: String!, password: String!): Token!
  UpdateUser(id: String!, email: String!): User!
  AddAddress(address: String!): User!
  AddRestaurant(
    name: String!
    owner: String!
    description: String!
    numReviews: Int!
    reviews: [String!]
    type: String!
    images: [String!]
    location: LocationInput!
    rating: Int!
    id: String!
  ): Restaurant!
  AddCostumer(name: String!, table: Int!, email: String!): Costumer
  FetchRestaurantsByQuery(searchQuery: String): [Restaurant]
  AddMenu(category: [MenuParentInput!], restaurant: String!): Menu
  AddMenuItem(
    restaurant: String!
    category: String!
    input: MenuItemInput
  ): MenuItem
  SignOut: String
  SignOutCostumer: String
  AddMenuCategory(name: String!, image: String!): MenuParent
  AddOrder(productId: ID!): [AdminOrder]!
  RemoveOrder(productId: ID!): [AdminOrder]!
  GetOrderItem(productId: ID!, restaurant: String!): OrderItem
  CostumerExpiry: CookieSuccess
  DeleteCostumer(costumerId: String): Costumer
  EmitSocket: OrderItem
  PostMessage(user: String!, content: String!): ID!
  GetCostumerOrders(restaurant: String!): [OrderItem]!
  UpdateMenuItems(
    productId: ID!
    restaurant: String!
    category: String!
    input: MenuItemInput
  ): MenuItem!
  UpdatePassword(token: String!, newPass: String!, userId: String!): User!
  SendResetPassword(email: String!): User!
  UpdateCategory(
    category: String
    image: String
    categoryId: String!
  ): MenuParent!
  Pay(restaurant: String, products: [String]): PayedItem!
  AddCostumerAddress(address: CostumerAddressInput): CostumerAddress
  EditUserInfoItem(name: String!, value: String!): User
  EditRestaurantInfoItem(
    restaurant: String
    name: String!
    value: String!
  ): Restaurant
  AddSellInfo(price: Float!, restaurant: String!, items: [String]!): SellInfo!
}
